import { useEffect, useRef, useCallback } from 'react';
import { useAppDispatch, useAppSelector } from '../../redux/hooks';
import { fetchPostData, getPostStatus, getAllPosts } from '../../redux/slices/postsSlice';
import Post from '../Post/Post';
import styles from './PostsList.module.scss'

const PostsList = () => {
  const postsData = useAppSelector(getAllPosts);
  const postsStatus = useAppSelector(getPostStatus);
  const dispatch = useAppDispatch();

  const observer = useRef<IntersectionObserver>();

  const lastPostElement = useCallback(
    (elem: HTMLDivElement) => {
      if (postsStatus === 'loading') return null;
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          dispatch(fetchPostData());
        }
      });
      if (elem) observer.current.observe(elem);
    },
    [postsStatus, dispatch]
  );

  useEffect(() => {
    if (postsStatus === 'idle') {
      dispatch(fetchPostData());
    }
  }, [dispatch, postsStatus]);

  return (
    <div className={styles.postContainer}>
      {postsData.map(({ imageURL, username, picture, likes }, idx: number) => {
        if (postsData.length === idx + 1) {
          return (
            <Post
              ref={lastPostElement}
              imageURL={imageURL}
              likes={likes}
              pictureSrc={picture}
              username={username}
              key={idx}
            />
          );
        }
        return (
          <Post
            imageURL={imageURL}
            likes={likes}
            pictureSrc={picture}
            username={username}
            key={idx}
          />
        );
      })}
      {postsStatus === 'loading' && (
        <svg className={styles.spinner}
          xmlns="http://www.w3.org/2000/svg"
          xmlnsXlink="http://www.w3.org/1999/xlink"
          width="200px"
          height="200px"
          viewBox="0 0 100 100"
          preserveAspectRatio="xMidYMid"
        >
          <circle
            cx="50"
            cy="50"
            fill="none"
            stroke="#333333"
            stroke-width="6"
            r="15"
            stroke-dasharray="70.68583470577033 25.561944901923447"
          >
            <animateTransform
              attributeName="transform"
              type="rotate"
              repeatCount="indefinite"
              dur="1s"
              values="0 50 50;360 50 50"
              keyTimes="0;1"
            ></animateTransform>
          </circle>
        {/* generated by https://loading.io/   */}
        </svg>
      )}
    </div>
  );
};

export default PostsList;
